min(maximum building height on the left - maximum building height on the right) - current height gives the height of water collected at each index 
/// WO WALA case imp hai jiske upar koi paani nahi collect hoga - vo dekh lo

usme min(max()


for checking leftmost and rightmost maximum we check from the index itself
/////
brute force = go from i to 0 for finding minimum and go from i to n-1 to find maximum  this means traversing entire array for each index  TC o(N^2)  SC O(1)


                                          int trap(vector < int > & arr) {
                                            int n = arr.size();
                                            int waterTrapped = 0;
                                            for (int i = 0; i < n; i++) {
                                              int j = i;
                                              int leftMax = 0, rightMax = 0;
                                              while (j >= 0) {
                                                leftMax = max(leftMax, arr[j]);
                                                j--;
                                              }
                                              j = i;
                                              while (j < n) {
                                                rightMax = max(rightMax, arr[j]);
                                                j++;
                                              }
                                              waterTrapped += min(leftMax, rightMax) - arr[i];
                                            }
                                            return waterTrapped;
                                          }

gives TLE

/////
better approach = use prefix sum
abhi tak ka max and min store karke chale raho

[0,1,0,2,1,0,1,3,2,1,2,1] iske liye prefix sum

prefix - 0 1 1 2 2 2 2 3 3 3 3 3 (starting from front and storing max)
sufffix  3 3 3 3 3 3 3 3 2 2 2 1 (starting from back and storing max)

now for each index i can find max and min in O(1) from the above arrays

Time complexity - O(N) +O(N)+ O(N) - 1) calculate prefix array 2) calculate suffix array 3) iterate over the entire array to find har index ke liye water stored
== o(N) only

S.C. O(2N)


                                              class Solution {
                                              public:
                                                 int trap(vector < int > & height) {
                                                int n = height.size();
                                                int prefix[n], suffix[n];
                                                prefix[0] = height[0];
                                                for (int i = 1; i < n; i++) {
                                                  prefix[i] = max(prefix[i - 1], height[i]);
                                                }
                                                suffix[n - 1] =height[n - 1];
                                                for (int i = n - 2; i >= 0; i--) {
                                                  suffix[i] = max(suffix[i + 1], height[i]);
                                                }
                                                int waterTrapped = 0;
                                                for (int i = 0; i < n; i++) {
                                                  waterTrapped += min(prefix[i], suffix[i]) - height[i];
                                                }
                                                return waterTrapped;
                                              }
                                              };

/////
stack solution (tough) don't explain isme O(2N) hi hai and it will consume lot of time in explanation




///// par iske baad ek aur method jo karna hai

