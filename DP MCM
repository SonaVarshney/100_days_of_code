    int solve(int arr[],int n,int i,int j){
        
        if(i==j) return 0;
        int mini=1e9;
        for(int k=i;k<=j-1;k++){
            int steps=arr[i-1]*arr[k]*arr[j]+solve(arr,n,i,k)+solve(arr,n,k+1,j);
            mini=min(steps,mini);
        }
        return mini;
    }
    int matrixMultiplication(int N, int arr[])
    {
        // code here
        int i=1,j=N-1;
        return solve(arr,N,i,j);
        
    }
    
    
    //memoised
     int solve(int arr[],int n,int i,int j, vector<vector<int>> &dp){
        
        if(i==j) return 0;
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        int mini=1e9;
        for(int k=i;k<=j-1;k++){
            int steps=arr[i-1]*arr[k]*arr[j]+solve(arr,n,i,k,dp)+solve(arr,n,k+1,j,dp);
            mini=min(steps,mini);
        }
        return dp[i][j]=mini;
    }
    int matrixMultiplication(int N, int arr[])
    {
        // code here
        int i=1,j=N-1;
        vector<vector<int>> dp(N,vector<int>(N,-1));
        return solve(arr,N,i,j,dp);
        
    }
    
    
    
    //tabulation
    
    int matrixMultiplication(int N, int arr[])
    {
        // code here
        int i=1,j=N-1;
        vector<vector<int>> dp(N,vector<int>(N,0));
        // return solve(arr,N,i,j,dp);
        
        
       
        //recursion ka ulta is tabulation isliye i from N-1 to 1
        for(int i=N-1;i>=1;i--){
            for(int j=i+1;j<=N-1;j++){
                   int mini=1e9;
                    for(int k=i;k<=j-1;k++){
                        int steps=arr[i-1]*arr[k]*arr[j]+dp[i][k]+dp[k+1][j];
                        mini=min(steps,mini);
                    }
                 dp[i][j]=mini;
                
            }
        }
        return dp[1][N-1];
        
    }
