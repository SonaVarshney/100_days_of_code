09/10/22

***************************************************************my approach-
  ListNode* reverseList(ListNode* head) {
        
        if(head==NULL || head->next ==NULL ){
            return head;
        }
        
         if(head->next->next ==NULL){
            ListNode* p= head;
             head=p->next;
              p->next->next= p;
             p->next=NULL;
            
            return head;
        }
        
        
        ListNode* prev;
        ListNode* temp= head->next;
        head->next=NULL;
        while(temp-> next != NULL){
            prev=temp;
            temp =temp->next;
            prev->next=head;
            head=prev;
        }
        
        temp->next= prev;
        head=temp;
        return head;
    }


*****************************************************better-  shorter code- covers all test cases( empty list, single element but time more than previous one)
ListNode* reverseList(ListNode* head) {
ListNode* curr= head;
      ListNode* prev= NULL;
        
        while(curr!=NULL){
         ListNode* temp =curr->next;
         curr->next=prev;
         prev=curr;
        curr=temp;
        }
        
        return prev;
        
        }
        
*************************************************************recursive approach-
ListNode* reverseList(ListNode* head) {
 if(head==NULL || head->next ==NULL ){
            return head;
        }
        
        ListNode* NewHead=reverseList(head->next);
        ListNode* headNext= head->next;
        headNext->next =head;
        head->next=NULL;
        return NewHead;
        }
        
